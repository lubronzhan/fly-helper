#!/bin/bash

: ${FLY_TARGET?"Need the fly target FLY_TARGET"}
: ${CONCOURSE_URL?"Need the concourse url"}

RED='\033[0;31m'
NC='\033[0m'
CONCOURSE_URL="https://${CONCOURSE_URL#https://}"
export CONCOURSE_URL="${CONCOURSE_URL/%\/}"
echo "Concourse url: $CONCOURSE_URL"
echo "FLY_TARGET:    $FLY_TARGET"

login_concourse() {
  local concourse_password=$(lpass show --note 'concourse-chorebot-secrets.yml' | grep concourse_admin_password | awk '{print $2}')

  fly -t "$FLY_TARGET" login -c "$CONCOURSE_URL" -u admin -p "$concourse_password"
}

open_pipeline() {
  local pipeline_name=${1?}
  local pipeline_url="${CONCOURSE_URL}/teams/main/pipelines/${pipeline_name}"

  echo "Open $pipeline_url"
  open "$pipeline_url"
}

open_cleanup_pipeline() {
  local lock_name=${1?"Need the lock name"}
  local pipeline_name=${2:-"all-envs-maintenance-master"}
  local cleanup_job_name="cleanup-$lock_name"
  local pipeline_url=""
  local build_info=$(get_recent_build $pipeline_name $cleanup_job_name)

  if [ -n "$build_info" ]; then
    echo "$build_info"
    build_num=$(echo $build_info | awk '{print $3}')
    pipeline_url="${CONCOURSE_URL}/teams/main/pipelines/${pipeline_name}/jobs/${cleanup_job_name}/builds/${build_num}"
  else
    pipeline_url="${CONCOURSE_URL}/teams/main/pipelines/${pipeline_name}/jobs/${cleanup_job_name}"
  fi

  echo "Open $pipeline_url"
  open "$pipeline_url"
}

flyhijack() {
  local build_url=${1?}

  fly -t "$FLY_TARGET" hijack -u "$build_url"
}

cleanup_lock() {
  local lock_name=${1?"Need the lock name"}
  local pipeline_name=${2:-"all-envs-maintenance-master"}

  fly -t "$FLY_TARGET" trigger-job -j "${pipeline_name}/cleanup-${lock_name}"
}

get_recent_build() {
  local pipeline_name=${1?"Need the pipeline name"}
  local job_name=${2?"Need the job name"}
  local build_count=${3:-1}

  fly -t "$FLY_TARGET" builds -j ${pipeline_name}/${job_name} -c "$build_count"
}

get_access_token_from_concourse() {
  local token_url="${CONCOURSE_URL}/auth/basic/token?team_name=main"
  local concourse_password=$(lpass show --note 'concourse-chorebot-secrets.yml' | grep concourse_admin_password | awk '{print $2}')
  local encoded_credential=$(echo -n "admin:$concourse_password" | base64)

  token_response=$(curl \
    -X POST \
    -k \
    -s \
    -H "Authorization: Basic $encoded_credential" \
    "$token_url"
    )

  if [[ "$token_response" =~ .*not-authorized.* ]] || [ "$token" = "" ];then
    echo "Error getting token: $token_response"
    exit 1
  fi

  token=$(echo $token_response | jq -r '.value')

  echo "$token"
}

get_access_token() {
  local token=$(bosh int --path=/targets/"${FLY_TARGET}"/token/value ~/.flyrc)

  echo "$token"
}

get_pipeline_resources() {
  local pipeline_name=${1?"Need the pipeline name"}
  local output_json=${2:-""}
  local token=$(get_access_token)
  local pipeline_resource_url="${CONCOURSE_URL}/api/v1/teams/main/pipelines/${pipeline_name}/resources"

  get_pipeline_resource_response=$(curl \
    -X GET \
    -k \
    -s \
    -H "Authorization: Bearer $token" \
    $pipeline_resource_url
    )

  if [ "$output_json" = "json" ];then
    echo "$get_pipeline_resource_response" | jq -r
  else
    echo "$get_pipeline_resource_response" | jq -r '.[].name'
  fi
}

get_resourse_version_detail() {
  local pipeline_name=${1?"Need the pipeline name"}
  local resource_name=${2?"Need the resource name"}
  local token=$(get_access_token)
  local resource_version_detail_url="${CONCOURSE_URL}/api/v1/teams/main/pipelines/${pipeline_name}/resources/${resource_name}/versions"

  get_resource_version_detail_response=$(curl \
    -X GET \
    -k \
    -s \
    -H "Authorization: Bearer $token" \
    $resource_version_detail_url
    )
  echo "$get_resource_version_detail_response"
}

get_pipeline_url_from_flag_url() {
  local flag_url=${1?"Need the flag url"}
  local branch_name=${2?"Need the branch name"}
  local om_version=$(echo "$flag_url" | cut -d'/' -f2)
  local iaas_info=$(echo "$flag_url" | cut -d'/' -f3)
  local senario=$(echo "$flag_url" | cut -d'/' -f4)

  echo "${CONCOURSE_URL}/teams/main/pipelines/${iaas_info}-${om_version}-${senario}-${branch_name}"
}

check_ship_tile() {
  local pipeline_branch=${1:-"master"}
  local pipeline_name="ship-tile-$pipeline_branch"
  local resources=$(get_pipeline_resources "$pipeline_name")
  local token=$(get_access_token)
  local resources_array=($(echo "$resources" | grep -v "tile" |grep -oE "(.*om.*flag)|(.*flags.*om.*)"))
  local tmp_file=$(mktemp)

  printf "$pipeline_name status:\n"

  local num=0
  info_array=()
  for resource in "${resources_array[@]}"; do
    resource_verion_detail=$(get_resourse_version_detail "$pipeline_name" "$resource")
    # echo "$resource_verion_detail"
    flag_name=$(echo "$resource_verion_detail" | jq -r '.[0].metadata | .[] | select(.name=="filename").value')
    flag_url=$(echo "$resource_verion_detail" | jq -r '.[0].version.path')

    pipeline_url=$(get_pipeline_url_from_flag_url "$flag_url" "$pipeline_branch")

    flag_build_num=$(echo "$flag_name" | cut -d'-' -f2-)
    tile_build_num=$(echo "$flag_name" | grep -oE "build\.\d+" | cut -d \. -f2)
    if [ "$num" -lt "$tile_build_num" ]; then
      num="$tile_build_num"
    fi
    info_array+=("$resource|$flag_build_num|$pipeline_url")
  done

  for info in "${info_array[@]}"; do
    tile_build_num=$(echo "$info" | grep -oE "build\.\d+" | cut -d \. -f2)
    colored_info="$NC$info$NC"
    if [ "$tile_build_num" -lt "$num" ]; then
      colored_info="$RED$info$NC"
    fi
    printf "$colored_info\n" >> "$tmp_file"
  done

  cat "$tmp_file" | sed 's/|/,|,/g' | column -s ',' -t
  rm "$tmp_file"
}
